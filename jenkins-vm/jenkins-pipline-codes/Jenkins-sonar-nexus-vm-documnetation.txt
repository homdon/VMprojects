
Plugins needed
- Nexus artifact uploader
- Sonarqube scanner
- Build Timestamp (To versio the artifact)
- Pipline utility
- Pipline Maven Intergration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To install plugins Jnekins
Go to settings > Plugins > Available

JDK 21 and 17 needed
To install in Jnekins
Settings > Tools > add JDK
Name JDK17
JAVA_HOME /usr/lib/jvm/java-17-openjdk-amd64
****
BEFORE this make sure yo install the JDK in you local machine / Jenkins Host
apt install openjdk-17-jdk -y
apt install openjdk-21-jdk -y
ls /usr/lib/jvm/ #this will dir of java
java --version
****
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now add Sonarqube tools
Settings > Tools > Sonarqube Scanner Installation 
Name sonar6.2 # makesure that this exact same to put in the pipeline
Version Sonarqube Scanner 6.2.1.4610
#This is suitable for the broject we will be doing.

Now the Sonarqube server detail,
Settings > System > Sonarqube Servers
check the Environment variables
Name sonarserver
url http://192.168.56.93:80 #give pricate ip and port number of the sonarqube vm
	Next add ser authen ti cation token to do that,
	First go to Sonarqube webpage,
	Go to your profile > my account > security > Generate token
	Name jenkins
	type user token
	click - generate token
	COPY the topen and Paste in the jenkins token part
Click Add > jenkins > choose secret text in drop down.
SAVE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
How to chnage the Quality gate in Sonarqube?
First go to Sonarqube webpage,
Go to Quality Gates > create > Vprofileqg
the name should appear,
Click the name > Unlock editing > choose the	option 
For here BUG > change the percentage 30%
SAVE

Next to change default Quality Gatesto Vprofileqg
click your project in the dashboard > project setting > Quality Gates > Choose " ALways use a specific Quality Gate" > choose you Gate i.e Vprofileqg
SAVE

Next change the webhook (This is need to send result to jenkins, this will need webhook)
Project name > Project settings > Webhooks > Create 
Name Jenkin-CI-webhooks
URL http://192.168.56.91:8080/sonarqube.webhook
		http://jenkins-privateIP:8080/sonarqube.webhook
Create
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now Nexus,
TO create Repo in NEXUS,
Log in to NEXUS > Settings > Repository > create Repository > Maven (hosted)
	Maven (hosted) if you want to save thee artifacts
	Maven (proxy) if you want ti dowload the artifacts	.
	Maven (group) if you want do both.
Name vprofile-repo
Create

Next to link the NExus repo Go to JENKINS and set credentials
Jenkins > Settings > credentials > Stre scoped to jinkis > click Syetem > Global credentials (unrestricted)
add credentials (NEXUS username and password)
Kind username and pasword
give the username and password
ID nexuslogin
desp nexuslogin
SAVE

Also change the IP in the pipeline 
nexusUrl: '192.168.56.92:8081',


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Build Timestamp (version date pattern)
Settings > Syetem >Build Timestamp  click enable BUILD_TMIESTAMP
yy-MM-dd_HH-mm
SAVE

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
the complete pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pipeline {
	agent any
	tools {
	    maven "MAVEN3.9"
	    jdk "JDK17"
	}

	stages {


	    stage('Fetch code') {
            steps {
               git branch: 'atom', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }

	    }


	    stage('Build'){
	        steps{
	           sh 'mvn install -DskipTests'
	        }

	        post {
	           success {
	              echo 'Now Archiving it...'
	              archiveArtifacts artifacts: '**/target/*.war'
	           }
	        }
	    }

	    stage('UNIT TEST') {
            steps{
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage("Sonar Code Analysis") {
        	environment {
                scannerHome = tool 'sonar6.2'
            }
            steps {
              withSonarQubeEnv('sonarserver') {
                sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }

	     stage("UploadArtifact"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: '192.168.56.92:8081',
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: 'vprofile-repo',
                  credentialsId: 'nexuslogin',
                  artifacts: [
                    [artifactId: 'vproapp',
                     classifier: '',
                     file: 'target/vprofile-v2.war',
                     type: 'war']
                  ]
                )
            }
        }


	}

}

